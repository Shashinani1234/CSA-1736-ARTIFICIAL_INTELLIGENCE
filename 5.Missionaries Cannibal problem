from collections import deque

def is_valid_state(state):
    m_left, c_left, m_right, c_right, boat = state
    if m_left < 0 or c_left < 0 or m_right < 0 or c_right < 0:
        return False
    if (m_left > 0 and m_left < c_left) or (m_right > 0 and m_right < c_right):
        return False
    return True

def get_neighbors(state):
    m_left, c_left, m_right, c_right, boat = state
    neighbors = []
    if boat == 'left':
        moves = [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]
        for m, c in moves:
            new_state = (m_left - m, c_left - c, m_right + m, c_right + c, 'right')
            if is_valid_state(new_state):
                neighbors.append(new_state)
    else:
        moves = [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]
        for m, c in moves:
            new_state = (m_left + m, c_left + c, m_right - m, c_right - c, 'left')
            if is_valid_state(new_state):
                neighbors.append(new_state)
    return neighbors

def bfs(initial_state, goal_state):
    queue = deque([(initial_state, [])])
    visited = set()

    while queue:
        current_state, path = queue.popleft()
        if current_state in visited:
            continue
        visited.add(current_state)

        new_path = path + [current_state]
        if current_state == goal_state:
            return new_path

        for neighbor in get_neighbors(current_state):
            if neighbor not in visited:
                queue.append((neighbor, new_path))

    return None


initial_state = (3, 3, 0, 0, 'left')
goal_state = (0, 0, 3, 3, 'right')

solution = bfs(initial_state, goal_state)

if solution:
    for step in solution:
        print(step)
else:
    print("No solution found.")
