class CSP:
    def __init__(self, variables, domains, neighbors, constraints):
        self.variables = variables  
        self.domains = domains  
        self.neighbors = neighbors  
        self.constraints = constraints  

    def is_consistent(self, var, value, assignment):
        for neighbor in self.neighbors[var]:
            if neighbor in assignment and not self.constraints(var, value, neighbor, assignment[neighbor]):
                return False
        return True

    def backtrack(self, assignment):
        if len(assignment) == len(self.variables):
            return assignment
        
        unassigned = [v for v in self.variables if v not in assignment]
        first = unassigned[0]
        
        for value in self.domains[first]:
            if self.is_consistent(first, value, assignment):
                assignment[first] = value
                result = self.backtrack(assignment)
                if result:
                    return result
                assignment.pop(first)
        
        return None

def map_coloring_csp():
    variables = ['WA', 'NT', 'SA', 'Q', 'NSW', 'V', 'T']
    domains = {var: ['Red', 'Green', 'Blue'] for var in variables}
    neighbors = {
        'WA': ['NT', 'SA'],
        'NT': ['WA', 'SA', 'Q'],
        'SA': ['WA', 'NT', 'Q', 'NSW', 'V'],
        'Q': ['NT', 'SA', 'NSW'],
        'NSW': ['Q', 'SA', 'V'],
        'V': ['SA', 'NSW'],
        'T': []
    }

    def constraints(var1, color1, var2, color2):
        return color1 != color2

    csp = CSP(variables, domains, neighbors, constraints)
    solution = csp.backtrack({})
    return solution


solution = map_coloring_csp()
print("Solution:", solution)
